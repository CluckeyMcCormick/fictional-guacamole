To Do:
------
1. Upgrade to Godot 4.0 (whenever that happens): GDScript

    There's a lot of features in Godot 4.0, including several updates to
    GDScript. I don't think I need any of those particular new GDScript
    features, but it introduces several drastic incompatabilities with our
    existing code - especially around setters and getters. We need several of
    Godot 4.0's other features; but before we get to those, we'll have to solve
    any outstanding GDScript issues.
    
2. Upgrade to Godot 4.0 (whenever that happens): Navigation

    We're currently using some features supplied via addon (i.e. Miloš Lukić's 
    Godot Navigation Lite) that are supported in the base version of Godot 4.0.
    We should upgrade to 4.0 as soon as possible. It's just a question of
    whenever that comes out...

3. Develop a basic attack system using the Sword

    We need to create a model/system for attacking. You can look at the
    Kinematic Core, Kinematic Driver Machine, and the overall concept of a
    "Kinematic Profile" as an example of the model/system for moving.
    
    We should expand on the Falling Body Machine to create some sort of new
    machine. This machine attacks whatever gets close to it, but can't move.
    It'll basically be a feature complete turret machine-brain. Neat!!!
    
4. Create weapon models

    We need to create weapons for our pawns to equip! We'll use OpenSCAD to
    design the models. Technically, since we use sprites in-game, we could just
    use models off the internet. However, I want the weapons designed to fit the
    Pawn models - and to be open source.
    
    We'll need:
    - A crossbow
    - A bow
    - A gun (musket-eque)
    - A halberd/pike
    - A shield
    - A torch
    - A knife
    
    And maybe a jezzail - a long rifle of some sort?

5. ATTACKS!
    
    Develop attacks for the weapons outlined above, including ranged attacks.
    That means developing the AI to go with these attacks - positioning and
    attacking at the correct interval. It'll be difficult, but we'll have
    something akin to a prototype when we're done.

6. Experiment with PicoCAD

    There's a powerful new tool by one Johan Peitz (@johanpeitz on Twitter) that
    I've been seeing make the rounds. It's called PicoCAD, and it allows you to
    draw polygons and generate matching UV with an interface that is INTENSELY
    reminiscent of Valve's Hammer. AND, it generates UV coordinates. THAT'S
    RIGHT! IT CAN GENERATE UV COORDINATES!!!!!!!!
    
    This opens up the floor for texture work that I had largely given up on. I'd
    like to use PicoCAD for models that have simple shapes but complex textures
    (i.e. the Pawn, shields with artwork, war machines, furniture, signs, etc).
    The more complex shapes where the visuals are more influenced by the
    silhouette (i.e. the weapons, especially the crossbow) will still be done
    with OpenSCAD.
    
    Unfortunately, this will be the first tool that I've used that isn't free
    and open source. That does hurt to certain degree but this tool is REALLY
    worth it.
    
    It'll be out on Johan's itch.io at some point in the near future.
  
7. Replace the procedural building components (and buildings) with Qodot

    I created the procedural building components with the VERY specific
    complaint that Godot didn't have anything like Valve's Hammer Editor for
    creating levels. Instead, the documents recommended BLENDER of all things.
    Bah!
    
    Well, that must have been some time ago, because the documents no longer
    recommend that. Now, they recommend Qodot.
    
    Qodot is an addon that allows you to import Quake `.map` files into Godot,
    transforming the world brushes and entities into Godot equivalents. When
    paired with the general purpose Quake mape editor TrenchBroom, this allows
    you to quickly and easily edit/create levels. 
    
    The Hammer Editor was a descendent of the Quake editor, so I would feel
    right at home. Altough I'm proud of the work I did on the procedural
    components, this development will largely sideline them. I guess that's
    fine - they can get their own little directory.
    
    I think we'll use this for editing whole levels, as well as creating
    building components by hands - and yes, I do mean components. Maybe whole
    buildings? We'll have to work with Qodot to determine what works best.

