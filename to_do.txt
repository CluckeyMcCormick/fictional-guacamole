To Do:
------

1. Generate a Rothenburg House on the fly

    I'm sick of wrestling with UV textures and seams and all that other nonsense
    for what amounts to a bunch of building blocks. I'm convinced that I can do
    better - programatically!

    My on-the-fly Roth House will need:
    - Configurable foundation size
    - Configurable wall thickness (we're gonna do away with the two-tier 
      thickness, both wall components are gonna be the same thickness)
    - Configurable height for foundation, lower wall, upper wall, and roof
      peak
    - Different textures for walls on the inside versus the outside, as well
      as the doorframe and wall-tops.
    - Texture/UV coordinates that are scaled - for example, a quad that goes 6
      on X & Y has a max UV of (6, 6). This will allow our textures to work
      with minimal futzing.
    - Configurable doorway height
    - Accurate Normals (uh-oh)
    - ACCURATE collision models that are updated to reflect the new shapes

    - Configurable doorway position???
    - Configurable windows ???

2. Add in a thatched Rothenburg House

    I like the way the wooden roof tiles look, but I think a thatched roof would
    look equally good, if not better. We should add an option to our on-the-fly
    Rothenburg House to generate a couple of alternate roofs. Maybe one that's 
    like the current roof, and one that's like a pyramid with the point removed
    (which I could swear was some sorta rectangular prism).

3. Asset rework: Textures and Clowns
    
    As I've said before, we need to do a major rework of the assets. We need new
    textures that actually have textures! Textured trees, rocks, grass, and all
    the like. I've also had a replacement for the clowns in the pipeline for a
    while; I'd like to get those guys in as part of this overhaul.

4. Fix UnitPawn movement

    The UnitPawn movement is really janky. I want them to speed up and slow
    down - subtly, though, like a person getting up to speed. Total War does a
    really good job of this, I think.

    Right now, the UnitPawns speed up every second they're moving, and
    frequently overshoot their targets and generally jitter and freak out.

    I also need the UnitPawns to be able to step up and down small height
    differences. If they're getting trapped on ledges with a height of .1 there
    could be some problems down the road.

    In college I worked on a robtoic car and had to design a kinematic feedback
    model (I think that's what it was called?) that allowed the car to
    naturally slow down and stop when it needed to. I think that mathematic
    nightmare might be just what I need here. There's a "Feedback Systems Wiki"
    that should furnish me with enough information to get what I need.

    Or I'll come up with a better and simpler idea. That seems equally likely.

5. Start using NavigationMesh

    Now that the UnitPawns can move correctly, and we have some terrain sorted
    out for them to deal with, we need to switch to using a NavigationMesh. I
    was weighing up what my options were for pathing, but the solution I've been
    given seems like the best way to go. It was, after all, given to us.

    As part of putting in the NavigationMesh, I suggest removing the whole
    'Unit' concept. No more ordering around a group of UnitPawns. Instead, we'll
    have one UnitPawn that repeatedly paths between designated points in the
    world - just as a test. The UnitPawn, upon arriving at a location, will
    randomly be assigned a new location to go to from a pool of options.

6. Build and Change a NavigationMesh on the fly

    This is the big one - a problem with Godot that I've seen at least one blog
    post complaining about is that there is no immediate and obvious way to
    create NavigationMeshes on the fly.

    However, since I want my prototype to have a dynamic world where trees
    fall over and block paths, or the player can put down more structures, or
    UnitPawns slow down when moving through certain areas. It is imperative,
    then, that I be able to edit and create a NavigationMesh at will.

    The answer is actually avaiable right now - the "Godot Navigation Lite"
    addon by Miloš Lukić. Looking at it, it has pretty much everything we need,
    we just need to play with it a little bit more.

    To stress test our little wandering UnitPawn, we should also add the ability
    to place down things like rocks, trees, or houses. And maybe, with a little
    bit of fiddling, we can get multiple meshes that recognize danger and the
    like...
