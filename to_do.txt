To Do:
------
1. Upgrade to Godot 4.0 (whenever that happens): GDScript

    There's a lot of features in Godot 4.0, including several updates to
    GDScript. I don't think I need any of those particular new GDScript
    features, but it introduces several drastic incompatabilities with our
    existing code - especially around setters and getters. We need several of
    Godot 4.0's other features; but before we get to those, we'll have to solve
    any outstanding GDScript issues.
    
2. Upgrade to Godot 4.0 (whenever that happens): Navigation

    We're currently using some features supplied via addon (i.e. Miloš Lukić's 
    Godot Navigation Lite) that are supported in the base version of Godot 4.0.
    We should upgrade to 4.0 as soon as possible. It's just a question of
    whenever that comes out...

3. Create weapon models

    We need to create weapons for our pawns to equip! We'll use OpenSCAD to
    design the models. Technically, since we use sprites in-game, we could just
    use models off the internet. However, I want the weapons designed to fit the
    Pawn models - and to be open source.
    
    We'll need:
    - A crossbow
    - A bow
    - A gun (musket-eque)
    - A sword
    - A halberd/pike
    - A shield
    - A torch
    - A knife
    
    And maybe a jezzail - a long rifle of some sort?

4. Integrate the weapon models and the Pawn sprites

    Okay, so we have to integrate our weapon models and our Pawn sprites.
    Conventional wisdom says that we should just have different spritesheets for
    each weapon. While we'll PROBABLY do that, I wanted to see if we can do
    anything extra kooky. Like, maybe we could have animation sets that are just
    the weapon and could somehow be layered over the Pawn Sprite? That would
    save us on Sprites.

5. ATTACKS!
    
    Finally, get our pawns to attack with their weapons. For now, we'll use some
    really basic target. The AI knowing how, and when, to attack will be the
    next big step for the project.

6. Improve the Slope-Step Test

    The Slope-Step Test needs some improvement. Right now, we need to wait for
    every single test to fire. Like, we just wait. We've already done something
    better with the Viewport Shader Test - we should migrate the test structure
    (especially the skip test button) from that scene.
    
7. Come up with a way to bake the procedural building components (?)

    I'm worried about the impact of the procedural building components on the
    game's performance. Once they're generated there's no issue but it's the
    start-up and load time that I'm worried about.

    It's possible for us to save the array meshes once they've been generated.
    I think we can create a plugin that will allow us to bake the components
    on-demand. We'll probably need to create a separate set of "baked" scenes.

    I'm still unsure about whether this is something even worth doing or not.
    I'll mull it over...

