To Do:
------
1. Upgrade to Godot 4.0 (whenever that happens): GDScript

    There's a lot of features in Godot 4.0, including several updates to
    GDScript. I don't think I need any of those particular new GDScript
    features, but it introduces several drastic incompatabilities with our
    existing code - especially around setters and getters. We need several of
    Godot 4.0's other features; but before we get to those, we'll have to solve
    any outstanding GDScript issues.
    
2. Upgrade to Godot 4.0 (whenever that happens): Navigation

    We're currently using some features supplied via addon (i.e. Miloš Lukić's 
    Godot Navigation Lite) that are supported in the base version of Godot 4.0.
    We should upgrade to 4.0 as soon as possible. It's just a question of
    whenever that comes out...

3. Devise some kind of documentation for the actual Godot component of the
   project
   
   Not everybody who comes across the project is going to be able to pull it
   apart like a watchmaker - even with the complete Git history. We should, for
   the sake of those people (and ourselves!) documents some of the oddities and
   quirks of this project.
   
   What immediately leaps to mind is the recently expanded special effects 
   directory, as well as the KinematicDriver, and the building components. The
   procedural terrain elements (the woods and the farm) are also good
   candidates.
   
   But there's also things like the individual physics and visual layers - we
   need to capture the ethos behind such decisions. I guess I could track down
   the relevant commits but that doesn't seem like it would work well for 
   something that isn't code. it's better to have solid documentation. To be
   honest, I keep forgetting myself...

4. Update the Dynamic Navigation Test

   The Dynamic Navigation Test should have some controls to explain the basics
   of what's happening in the test. I don't want to track controls in external
   documentation, so the scene will need some sort of notice.

5. Update the Shader Test

   The shader test right now is... kind of bad. I'm literally just throwing the
   pawns at random locations in a bid to see how they interact with each other
   and the environment. That kind of sucks. We can do better.
   
   We should have each pawn set in a static position. They should step forward,
   one by one, to do a series of tests. These tests should include:
   
   - Passing in front of and behind transparent materials
   - Passing in front of and behind opaque materials
   - Stepping in to and behind a HUT scene
   - Stepping in to, out of, and behind, a WOODS scene
   - Passing in front of and behind each other - both with full visibility and
     an obscuring obstacle

6. Track down and fix the stair-corner glitch

    There's been a pretty persistent glitch - if you order a pawn to navigate to
    a corner where the top of the stairs meets the wall of a Hut, the pawn
    freaks out and rapidly oscillates up-and-down. In the past we've fixed it by
    increasing the goal tolerance.
    
    I think this is coming about because the pawn is tyring to reach a point on
    a vertical that it can very nearly reach, but not actually reach. We'll have
    to crack it open and see.
    
    If my assumption is correct, then we'll need to add a "Vertical Tolerance"
    to the KinematicDriver.

7. Create weapon models

    We need to create weapons for our pawns to equip! We'll use OpenSCAD to
    design the models. Technically, since we use sprites in-game, we could just
    use models off the internet. However, I want the weapons designed to fit the
    Pawn models - and to be open source.
    
    We'll need:
    - A crossbow
    - A bow
    - A gun (musket-eque)
    - A sword
    - A halberd/pike
    - A shield
    - A torch
    - A knife
    
    And maybe a jezzail - a long rifle of some sort?

8. Integrate the weapon models and the Pawn sprites

    Okay, so we have to integrate our weapon models and our Pawn sprites.
    Conventional wisdom says that we should just have different spritesheets for
    each weapon. While we'll PROBABLY do that, I wanted to see if we can do
    anything extra kooky. Like, maybe we could have animation sets that are just
    the weapon and could somehow be layered over the Pawn Sprite? That would
    save us on Sprites.

9. ATTACKS!
    
    Finally, get our pawns to attack with their weapons. For now, we'll use some
    really basic target. The AI knowing how, and when, to attack will be the
    next big step for the project.

