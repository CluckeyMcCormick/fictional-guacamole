To Do:
------
1. Upgrade to Godot 4.0 (whenever that happens)

    We're currently using some features supplied via addon (i.e. Miloš Lukić's 
    Godot Navigation Lite) that are supported in the base version of Godot 4.0.
    We should upgrade to 4.0 as soon as possible. It's just a question of
    whenever that comes out...

2. Add a testing root menu

    We very frequently swap out our "active" test depending on what we're
    testing. Rather than constantly updating what our "current" test is through
    the project settings, we should have a scene that's just a menu. Each option
    on the menu is a different test. You should be able to pick any test scene
    and load it, then exit in real time.
    
    This will be a good test for us - loading scenes, doing menus, pausing the
    game. Maybe doing a loading screen of some sort...

3. Devise a way to see things through walls

    The obvious weakness of doing a 3D game with a trick/forced isometric
    perspective is that stuff can go behind walls or trees or bushes - in other
    words, place where we can't see them.
    
    I'm still playing around with the prototype's genre in my head (it's really
    more of a personal tech demo right now). Regardless of genre or gametype, we
    are going to need a way to see characters or entities through walls. To a
    certain degree, this was the purpose behind the Sims-style cutaway walls.
    
    That works REALLY well for when a character is in a house. However, when the
    character is camped in the "hiding corner" we just cutaway everything and it
    looks... bad. Plus, the code to control the hiding corner has to be redone
    for EVERY SINGLE building type, and we haven't even messed with trees yet.
    There has to be a more general solution.
    
    There are two options really, and I want to implement both. The first is
    frequently referred to as "masking" - it's like in Katamari Damacy, how
    there's always a circle of visibility around you character (apparently
    Divinity 2 uses a similar system). This solution would likely involve a
    second camera, a viewport, using the "Visual Layers" to control what the
    second camera can and can't see, and then using what's called a
    "Screen-reading shader". Don't know HOW to use that but it's been supported
    since Godot 3.0 so good enough for me!
    
    The second option would be either a color-fill (like in the pipe sections of
    Super Mario Sunshine) or an silhouette outline (like in Left 4 Dead). I
    think some RTS games do this. The idea is that we can always see a
    color-filled silhouette of the character, even if they're behind walls.
    
    Having two tiers of solution here will give us a pallette of options going
    forward and will give me a chance to learn Godot's shaders (which I haven't
    messed with AT ALL).

4. Create weapon models

    We need to create weapons for our pawns to equip! We'll use OpenSCAD to
    design the models. Technically, since we use sprites in-game, we could just
    use models off the internet. However, I want the weapons designed to fit the
    Pawn models - and to be open source.
    
    We'll need:
    - A crossbow
    - A bow
    - A gun (musket-eque)
    - A sword
    - A halberd/pike
    - A shield
    - A torch
    - A knife
    
    And maybe a jezzail - a long rifle of some sort?

5. Integrate the weapon models and the Pawn sprites

    Okay, so we have to integrate our weapon models and our Pawn sprites.
    Conventional wisdom says that we should just have different spritesheets for
    each weapon. While we'll PROBABLY do that, I wanted to see if we can do
    anything extra kooky. Like, maybe we could have animation sets that are just
    the weapon and could somehow be layered over the Pawn Sprite? That would
    save us on Sprites.

6. ATTACKS!
    
    Finally, get our pawns to attack with their weapons. For now, we'll use some
    really basic target. The AI knowing how, and when, to attack will be the
    next big step for the project.

