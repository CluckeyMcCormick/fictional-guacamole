To Do:
------
1. Upgrade to Godot 4.0 (whenever that happens): GDScript

    There's a lot of features in Godot 4.0, including several updates to
    GDScript. I don't think I need any of those particular new GDScript
    features, but it introduces several drastic incompatabilities with our
    existing code - especially around setters and getters. We need several of
    Godot 4.0's other features; but before we get to those, we'll have to solve
    any outstanding GDScript issues.
    
2. Upgrade to Godot 4.0 (whenever that happens): Navigation

    We're currently using some features supplied via addon (i.e. Miloš Lukić's 
    Godot Navigation Lite) that are supported in the base version of Godot 4.0.
    We should upgrade to 4.0 as soon as possible. It's just a question of
    whenever that comes out...

3. Develop a new slope step test

    We need a new version of the slope step test. One that can hopefully do a
    more thorough stress test of the Kinematic Driver Machine.
    
    I'm imagining a test where there's only one step, one slope, and maybe a
    platform of some description for testing falls. The angle of the slope and
    the height of the ramp can be controlled by GUI sliders. Each test has a
    different button and the GUI locks while the test is in progress.
    
    This may replace the Slope Step Test; however, we may use Dynamic Navigation
    Meshes for this test in which case it should exist alongside the basic Slope
    Step Test.

4. Develop a basic attack system using the Sword

    We need to create a model/system for attacking. You can look at the
    Kinematic Core, Kinematic Driver Machine, and the overall concept of a
    "Kinematic Profile" as an example of the model/system for moving.
    
    We should expand on the Falling Body Machine to create some sort of new
    machine. This machine attacks whatever gets close to it, but can't move.
    It'll basically be a feature complete turret machine-brain. Neat!!!
    
5. Create weapon models

    We need to create weapons for our pawns to equip! We'll use OpenSCAD to
    design the models. Technically, since we use sprites in-game, we could just
    use models off the internet. However, I want the weapons designed to fit the
    Pawn models - and to be open source.
    
    We'll need:
    - A crossbow
    - A bow
    - A gun (musket-eque)
    - A halberd/pike
    - A shield
    - A torch
    - A knife
    
    And maybe a jezzail - a long rifle of some sort?

6. ATTACKS!
    
    Develop attacks for the weapons outlined above, including ranged attacks.
    That means developing the AI to go with these attacks - positioning and
    attacking at the correct interval. It'll be difficult, but we'll have
    something akin to a prototype when we're done.

7. Improve the Slope-Step Test

    The Slope-Step Test needs some improvement. Right now, we need to wait for
    every single test to fire. Like, we just wait. We've already done something
    better with the Viewport Shader Test - we should migrate the test structure
    (especially the skip test button) from that scene.
    
8. Come up with a way to bake the procedural building components (?)

    I'm worried about the impact of the procedural building components on the
    game's performance. Once they're generated there's no issue but it's the
    start-up and load time that I'm worried about.

    It's possible for us to save the array meshes once they've been generated.
    I think we can create a plugin that will allow us to bake the components
    on-demand. We'll probably need to create a separate set of "baked" scenes.

    I'm still unsure about whether this is something even worth doing or not.
    I'll mull it over...

